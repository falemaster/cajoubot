"""
Bot Telegram ultra-simplifi√© pour ajouter des comptables √† Notion
Version minimaliste qui fonctionne avec la structure existante
"""

import os
import logging
import asyncio
from datetime import datetime
from typing import Dict, Any

import aiohttp
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# Configuration des logs
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# √âtats de conversation
NOM, PRENOM, SOCIETE, EMAIL, TELEPHONE, VILLE = range(6)

# Configuration
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
NOTION_TOKEN = os.getenv("NOTION_TOKEN") 
NOTION_DB_ID = os.getenv("NOTION_DB_ID")
ALLOWED_USER_IDS = os.getenv("ALLOWED_USER_IDS", "").split(",")

class SimpleNotionClient:
    """Client Notion ultra-simple"""
    
    def __init__(self):
        self.token = NOTION_TOKEN
        self.database_id = NOTION_DB_ID
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        }
    
    async def add_comptable(self, data: Dict[str, Any]) -> bool:
        """Ajoute un comptable √† Notion"""
        try:
            properties = {}
            
            # Nom (rich_text)
            if data.get("nom"):
                properties["Nom"] = {
                    "rich_text": [{"text": {"content": data["nom"]}}]
                }
            
            # Pr√©nom (rich_text)
            if data.get("prenom"):
                properties["Pr√©nom"] = {
                    "rich_text": [{"text": {"content": data["prenom"]}}]
                }
            
            # Soci√©t√© (rich_text)
            if data.get("societe"):
                properties["Soci√©t√©"] = {
                    "rich_text": [{"text": {"content": data["societe"]}}]
                }
            
            # Customer Email (email)
            if data.get("email"):
                properties["Customer Email"] = {
                    "email": data["email"]
                }
            
            # Phone (phone_number)
            if data.get("telephone"):
                properties["Phone"] = {
                    "phone_number": data["telephone"]
                }
            
            # Localisation (rich_text)
            if data.get("ville"):
                properties["Localisation"] = {
                    "rich_text": [{"text": {"content": data["ville"]}}]
                }
            
            # Date (date)
            properties["Date"] = {
                "date": {"start": datetime.now().isoformat()[:10]}
            }
            
            # √âtape de la qualification (select)
            properties["√âtape de la qualification"] = {
                "select": {"name": "Nouveau"}
            }
            
            payload = {
                "parent": {"database_id": self.database_id},
                "properties": properties
            }
            
            async with aiohttp.ClientSession() as session:
                url = "https://api.notion.com/v1/pages"
                async with session.post(url, headers=self.headers, json=payload) as response:
                    if response.status == 200:
                        logger.info("Comptable ajout√© avec succ√®s")
                        return True
                    else:
                        error = await response.text()
                        logger.error(f"Erreur Notion: {response.status} - {error}")
                        return False
                        
        except Exception as e:
            logger.error(f"Erreur lors de l'ajout: {e}")
            return False

# Instance du client Notion
notion_client = SimpleNotionClient()

def check_user_authorized(user_id: str) -> bool:
    """V√©rifie si l'utilisateur est autoris√©"""
    return str(user_id) in ALLOWED_USER_IDS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Commande /start"""
    user_id = str(update.effective_user.id)
    
    if not check_user_authorized(user_id):
        await update.message.reply_text("‚ùå Vous n'√™tes pas autoris√© √† utiliser ce bot.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üëã Bonjour ! Je vais vous aider √† ajouter un comptable √† la base Notion.\n\n"
        "üìù Commen√ßons par le nom de famille :"
    )
    return NOM

async def get_nom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re le nom"""
    context.user_data['nom'] = update.message.text.strip()
    await update.message.reply_text("‚úÖ Nom enregistr√©.\n\nüìù Maintenant, le pr√©nom :")
    return PRENOM

async def get_prenom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re le pr√©nom"""
    context.user_data['prenom'] = update.message.text.strip()
    await update.message.reply_text("‚úÖ Pr√©nom enregistr√©.\n\nüè¢ Maintenant, le nom de la soci√©t√© :")
    return SOCIETE

async def get_societe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re la soci√©t√©"""
    context.user_data['societe'] = update.message.text.strip()
    await update.message.reply_text("‚úÖ Soci√©t√© enregistr√©e.\n\nüìß Maintenant, l'adresse email :")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re l'email"""
    email = update.message.text.strip()
    
    # Validation basique de l'email
    if "@" not in email or "." not in email:
        await update.message.reply_text("‚ùå Email invalide. Veuillez saisir un email valide :")
        return EMAIL
    
    context.user_data['email'] = email
    await update.message.reply_text("‚úÖ Email enregistr√©.\n\nüìû Maintenant, le num√©ro de t√©l√©phone :")
    return TELEPHONE

async def get_telephone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re le t√©l√©phone"""
    context.user_data['telephone'] = update.message.text.strip()
    await update.message.reply_text("‚úÖ T√©l√©phone enregistr√©.\n\nüèôÔ∏è Enfin, la ville :")
    return VILLE

async def get_ville(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """R√©cup√®re la ville et finalise l'ajout"""
    context.user_data['ville'] = update.message.text.strip()
    
    # R√©capitulatif
    data = context.user_data
    recap = f"""
‚úÖ **R√©capitulatif :**

üë§ **Nom :** {data['nom']}
üë§ **Pr√©nom :** {data['prenom']}
üè¢ **Soci√©t√© :** {data['societe']}
üìß **Email :** {data['email']}
üìû **T√©l√©phone :** {data['telephone']}
üèôÔ∏è **Ville :** {data['ville']}

‚è≥ Ajout en cours √† la base Notion...
"""
    
    await update.message.reply_text(recap, parse_mode='Markdown')
    
    # Ajout √† Notion
    success = await notion_client.add_comptable(data)
    
    if success:
        await update.message.reply_text(
            "üéâ **Comptable ajout√© avec succ√®s !**\n\n"
            "Utilisez /start pour ajouter un autre comptable.",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ùå **Erreur lors de l'ajout.**\n\n"
            "Veuillez r√©essayer avec /start"
        )
    
    # Nettoyage
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Annule la conversation"""
    await update.message.reply_text(
        "‚ùå Ajout annul√©.\n\nUtilisez /start pour recommencer."
    )
    context.user_data.clear()
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Commande /help"""
    help_text = """
ü§ñ **Bot Comptables - Aide**

**Commandes disponibles :**
‚Ä¢ `/start` - Ajouter un nouveau comptable
‚Ä¢ `/help` - Afficher cette aide
‚Ä¢ `/cancel` - Annuler l'ajout en cours

**Utilisation :**
1. Tapez `/start`
2. Suivez les instructions
3. Remplissez les informations demand√©es
4. Le comptable sera ajout√© automatiquement √† Notion

**Support :** Contactez l'administrateur en cas de probl√®me.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """Fonction principale"""
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN manquant")
        return
    
    if not NOTION_TOKEN:
        logger.error("NOTION_TOKEN manquant")
        return
    
    if not NOTION_DB_ID:
        logger.error("NOTION_DB_ID manquant")
        return
    
    logger.info("D√©marrage du bot...")
    
    # Cr√©ation de l'application
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Gestionnaire de conversation
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nom)],
            PRENOM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_prenom)],
            SOCIETE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_societe)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)],
            TELEPHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_telephone)],
            VILLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ville)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # Ajout des handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    
    # D√©marrage
    logger.info("Bot d√©marr√© avec succ√®s !")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()

